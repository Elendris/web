---
import FormItem from "../formItem/FormItem.astro";
import Icon from "../icons/Icon.astro";
import { getCollection } from 'astro:content';
import { getLangFromUrl, useTranslations } from "../../i18n/utils";

const lang = getLangFromUrl(Astro.url);
const reservationCollection = await getCollection('reservation');
const reservationContent = reservationCollection.find(entry => entry.slug === lang);

if (!reservationContent) {
  throw new Error(`Content for language ${lang} not found`);
}

const { data, body } = reservationContent;
const { title } = data;

const t = useTranslations(lang);

const today = new Date().toISOString().split('T')[0];
---

<dialog class="reservation">
  <form id="reservationForm" class="reservation__form" method="post">
    <div class="reservation__header">
      <h3>{title}</h3>
      <button
        class="reservation__close"
        type="button"
        aria-label={t('reservation.btn.close')}
        title={t('reservation.btn.close')}
        id="reservationClose"
      >
        <Icon name="close" />
      </button>
    </div>
    <p>
      {body}
    </p>
    <div>
      <fieldset>
        <legend>{t('reservation.subtitle.date')}</legend>
        <p>{t('reservation.desc.date')}</p>
        <FormItem label={t('reservation.formLabel.from')}>
          <input type="date" name="from" required min={today} />
        </FormItem>
        <FormItem label={t('reservation.formLabel.to')}>
          <input type="date" name="to" required min={today} />
        </FormItem>
      </fieldset>
      <fieldset>
        <legend>{t('reservation.subtitle.contactInfo')}</legend>
        <p>{t('reservation.desc.contactInfo')}</p>
        <FormItem label={t('reservation.formLabel.firstName')}>
          <input type="text" name="fname" required />
        </FormItem>
        <FormItem label={t('reservation.formLabel.lastName')}>
          <input type="text" name="lname" required />
        </FormItem>
        <FormItem label={t('reservation.formLabel.email')}>
          <input
            type="email"
            placeholder="john@doe.com"
            name="email"
            required
          />
        </FormItem>
        <FormItem label={t('reservation.formLabel.phone')}>
          <input type="tel" placeholder="+420123456789" name="phone" required />
        </FormItem>
        <FormItem label={t('reservation.formLabel.note')}>
          <textarea name="note" />
        </FormItem>
      </fieldset>
    </div>
    <fieldset>
      <legend>{t('reservation.subtitle.rooms')}</legend>
      <p>{t('reservation.desc.rooms')}</p>
      <div class="col-span-2">
        <p class="reservation__empty-message">{t('reservation.message.emptyRooms')}</p>
        <div id="roomsList" class="reservation__room-list"></div>
        <div class="reservation__actions">
          <label class="check-box" title={t('reservation.formLabel.breakfast.title')}>
            <input type="checkbox" name="breakfast" value="1" />
            {t('reservation.formLabel.breakfast')}
          </label>
          <button
            type="button"
            id="addRoom"
            class="btn btn--small btn--secondary"
          >
          {t('reservation.btn.addRoom')}
            <Icon name="plus" />
          </button>
        </div>
      </div>
    </fieldset>
    <div class="reservation__footer">
      <button class="btn btn--secondary" type="button" id="cancelBtn">
        {t('reservation.btn.cancel')}
      </button>
      <button class="btn btn--primary" type="submit" id="submitBtn">
        {t('reservation.btn.submit')}
      </button>
    </div>
  </form>
</dialog>

<div id="successMessage" class="success-message" style="display: none;">
  {t('reservation.message.success')}
</div>

<script>
   import { initReservation } from "./Reservation.ts";
  import { sendEmail } from "./sendEmail.ts";

  document.addEventListener("DOMContentLoaded", () => {
    initReservation();

    const urlParams = new URLSearchParams(window.location.search);
    const successMessage = document.getElementById('successMessage') as HTMLDivElement;
    const hideTime = 5000;

    if (urlParams.has('reservated') && urlParams.get('reservated') === 'true') {
      if (successMessage) {
        successMessage.style.display = 'block';
        successMessage.style.setProperty('--success-message_anim-time', `${hideTime / 1000}s`);
        setTimeout(() => {
          successMessage.style.display = 'none';
        }, hideTime);
      }
    }

    const form = document.getElementById('reservationForm') as HTMLFormElement;

    if (form) {
      form.addEventListener('submit', async (event) => {
        event.preventDefault();

        const formData = new FormData(form);

        const emailSent = await sendEmail(formData);

        if (emailSent) {
          window.location.href = window.location.pathname + '?reservated=true';
        } else {
          alert('Failed to send email');
        }
      });
    }
  });
</script>