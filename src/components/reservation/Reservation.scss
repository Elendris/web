@use "../../styles/base/mixins/index" as *;
@use "../../styles/base/functions/index" as *;
@use "../../styles/base/variables/index" as *;
@use "../../styles/base/placeholders/index" as *;

@mixin create-reservation {
	.reservation {
		top: var(--resservation_top, 5svb);
		left: 50%;
		display: var(--dialog_display, none);
		inline-size: $width-desktop-l;
		max-block-size: 90svb;
		margin: 0;
		background-color: $color-white;
		opacity: var(--dialog_opacity, 0);
		border-radius: 1em;
		translate: -50% var(--dialog_trans-y, 5svb);
		transition-duration: var(--trans-time);
		transition-property: overlay display opacity;
		box-shadow: 0 $gap-s $gap-xl 0 $color-shadow;
		transition-behavior: allow-discrete;

		@include mq-responsive(tablet, max) {
			--resservation_top: #{$gap-l};
			max-block-size: calc(100svb - $gap-2xl);
			padding-block: 0;
		}

		&[open] {
			--dialog_display: block;
			--dialog_opacity: 1;
			--dialog_trans-y: 0;

			@starting-style {
				--dialog_opacity: 0;
				--dialog_trans-y: 5svb;
			}
		}

		&:has(.reservation__room) {
			--empty-message_display: none;
			--breakfast-chck_opacity: 1;
			--breakfast-chck_pointer-events: auto;
		}

		&__form {
			@include grid-columns(grid, repeat(var(--form_col-count, 2), 1fr), clamp($gap-l, 2.5svi, $gap-3xl), stretch);

			@include mq-responsive(tablet, max) {
				--form_col-count: 1;
			}

			fieldset {
				--fieldset_gap: #{$gap-xl};
				@include grid-columns(grid, repeat(var(--fieldet_col-count, 2), 1fr), var(--fieldset_gap), stretch);
				row-gap: $gap-l;
				padding-block: var(--fieldet_pad-block,  $gap-m);
				padding-inline: var(--fieldet_pad-inline, clamp($gap-l, 2svi, $gap-xl));
				margin: 0;
				border: none;
				border-block-start: var(--fieldet_border-width, $border-width) solid $color-border;

				@include mq-responsive(mobile-xl, max) {
					--fieldset_gap: #{$gap-l};
					--fieldet_pad-inline: 0;
					--fieldet_pad-block: 0;
					--fieldet_border-width: 0;
				}

				&:has(select) {
					@include grid-columns(grid, 1fr, $gap-l, flex-end);
				}

				> legend {
					padding-inline: var(--fieldset-legend_pad-inline, $gap-s);
					background-color: $color-white;
					font-family: $font-title;
					font-size: var(--legend_fs, clamp($gap-xl, 3svb, $gap-2xl));
					color: $color-primary;
					translate: num-neg($gap-s) 0;

					@include mq-responsive(mobile-xl, max) {
						--fieldset-legend_pad-inline: 0;
						--legend_fs: x-large;
						translate: 0;
					}
				}

				> p {
					@include grid-col-span(2);
					margin-block-end: var(--fieldset-p_mg-bottom, $gap-l);
					font-size: $gap-l;
					color: $color-text;

					@include mq-responsive(mobile-xl, max) {
						--fieldset-p_mg-bottom: #{$gap-m};
					}
				}

				+ fieldset {
					margin-block-start: $gap-xl;
				}
			}

			> :where(p) {
				@include grid-col-span(2);
				max-inline-size: unset;
				margin: 0;

				@include mq-responsive(tablet, max) {
					@include grid-col-span(1);
				}
			}
		}

		&__header {
			@include grid-columns(grid, 1fr auto, $gap-l, start);
			@include grid-col-span(2);
			background-color: $color-white;

			@include mq-responsive(tablet, max) {
				@include grid-col-span(1);
				position: sticky;
				inset: 0 0 auto 0;
				padding-block: var(--dialog_pad-block);
				z-index: 10;
			}

			@include mq-responsive(mobile-xl, max) {
				padding-block-end: $gap-m;
				padding-inline: var(--container_padding-x);
				margin-inline: num-neg(var(--container_padding-x));
			}

			> h3 {
				margin-block-end: 0;
			}
		}

		&__close {
			@extend %close-button;
			position: relative !important;
			inset: initial !important;
		}

		&__empty-message {
			display: var(--empty-message_display, block);
			padding: $gap-l $gap-xl;
			margin-block-end: $gap-l;
			background-color: $color-warning;
			border-radius: $radius-m;
			font-size: $gap-l;
			color: $color-text;

			@include mq-responsive(mobile-xl, max) {
				padding: $gap-m $gap-l;
			}
		}

		&__room {
			@include grid-col-span(2);
			@include grid-columns(grid, 1fr 120px auto, var(--fieldset_gap), flex-end);
			row-gap: $gap-l;

			@include mq-responsive(mobile-xl, max) {
        grid-template-columns: 1fr 80px auto;
      }

			> div[id*="separateBedsContainer"]:empty {
				display: none;
			}

			> div:has(.check-box) {
				@include grid-col-span(2);
			}
		}

		&__room-list {
			@include grid-columns(grid, 1fr, 0, flex-end);
			padding-inline-end: $gap-m;

			@include mq-responsive(tablet, min) {
				max-block-size: 40svb;
				overflow: auto;
				overscroll-behavior: contain;
			}

			&:empty {
				display: none;
			}

			hr {
				inline-size: 100%;
				height: $border-width;
				margin-block: $gap-l;
				border-top: $border-width solid $color-border;
				color: $color-border;
				translate: 0 -100%;
				grid-column: 1 / 4;
			}
		}

		&__footer {
			@include flex-set(flex, row, nowrap, $gap-l, center, var(--form-footer_jc, flex-end));
			@include grid-col-span(2);
			padding-block-start: var(--dialog_pad-block);
			background-color: $color-white;
			text-align: right;

			@include mq-responsive(tablet, max) {
				@include grid-col-span(1);
				position: sticky;
				inset: auto 0 0 0;
				padding-block: var(--dialog_pad-block);
				z-index: 10;
			}

			@include mq-responsive(mobile-xl, max) {
				--form-footer_jc: space-between;
				padding-inline: var(--container_padding-x);
				margin-inline: num-neg(var(--container_padding-x));
			}
		}

		&__actions {
			@include grid-col-span(2);
			@include flex-set(flex, row, nowrap, $gap-l, center, space-between);

			.check-box {
				opacity: var(--breakfast-chck_opacity, 0);
				pointer-events: var(--breakfast-chck_pointer-events, none);
			}
		}
	}

	dialog.success-dialog{
		padding-block: $gap-xl;
		padding-inline: $gap-3xl;
		background-color: $color-white;
		border-radius: $radius-l;

		h4{
			margin: 0;
		}
	}
}
